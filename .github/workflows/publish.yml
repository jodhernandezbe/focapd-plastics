name: Release
on:
  release:
    types:
      - created

jobs:
  publish:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.12]
        poetry-version: [1.8.4]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Increment Version if Needed
        id: version_bump
        run: |
          VERSION=$(poetry version -s)
          while true; do
            # Attempt to publish with the current version
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://pypi.org/project/focapd/$VERSION/)
            if [ "$RESPONSE" = "404" ]; then
              echo "New version is $VERSION"
              poetry version $VERSION
              break
            else
              echo "Version $VERSION already exists, incrementing..."
              poetry version patch
              VERSION=$(poetry version -s)
            fi
          done
        shell: bash

      - name: Publish
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_API_TOKEN
          poetry publish --build